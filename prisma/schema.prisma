// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  name             String?
  password         String
  company          String?
  phone            String?  // Legacy field - kept for backward compatibility
  
  // Enhanced profile fields
  primaryPhone     String?
  cellPhone        String?
  homePhone        String?
  workPhone        String?
  
  // Address fields
  address          String?  // Legacy field - kept for backward compatibility
  homeAddress      String?
  officeAddress    String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  
  emailVerified    Boolean  @default(false)
  emailVerifyToken String?
  emailVerifyExpires DateTime?
  role             String   @default("customer") // "customer", "sub_admin", "admin", or "super_admin"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  orders    Order[]
  
  @@map("app_users")
}

model Service {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String
  description String?
  basePrice   Decimal? @db.Decimal(10, 2)
  priceUnit   String?
  features    Json?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  orderItems  OrderItem[]
  
  @@map("services")
}

enum OrderStatus {
  pending
  processing
  in_transit
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  orderNumber    String        @unique
  status         OrderStatus   @default(pending)
  paymentStatus  PaymentStatus @default(pending)
  totalAmount    Decimal       @db.Decimal(10, 2)
  trackingNumber String?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  user           User          @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  tracking       OrderTracking[]
  
  @@index([userId])
  @@index([orderNumber])
  @@map("orders")
}

model OrderItem {
  id             String   @id @default(uuid())
  orderId        String
  serviceId      String
  quantity       Int      @default(1)
  unitPrice      Decimal  @db.Decimal(10, 2)
  totalPrice     Decimal  @db.Decimal(10, 2)
  specifications Json?
  createdAt      DateTime @default(now())
  
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service  Service @relation(fields: [serviceId], references: [id])
  
  @@index([orderId])
  @@map("order_items")
}

model OrderTracking {
  id          String   @id @default(uuid())
  orderId     String
  status      String
  location    String?
  description String?
  createdAt   DateTime @default(now())
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@map("order_tracking")
}

model ContentSection {
  id        String   @id @default(uuid())
  type      String   // "hero", "about", "services", "contact", "footer"
  name      String
  title     String
  content   String   @db.Text
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([type])
  @@map("content_sections")
}

model SeoSettings {
  id            String   @id @default(uuid())
  title         String
  description   String   @db.Text
  keywords      String   @db.Text
  ogTitle       String
  ogDescription String   @db.Text
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("seo_settings")
}

model MediaFile {
  id          String   @id @default(uuid())
  name        String
  type        String   // "image", "document", "video", "audio"
  url         String
  size        BigInt
  mimeType    String?
  width       Int?
  height      Int?
  alt         String?
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("media_files")
}

model TruckRegistration {
  id                String   @id @default(uuid())
  
  // Owner Information
  ownerName         String
  email             String
  phone             String
  address           String
  city              String?
  state             String?
  zipCode           String?
  
  // Business Information
  companyName       String
  businessType      String   // "individual" or "company"
  officeGarageAddress String
  taxId             String?
  yearsInBusiness   String
  areYouOwner       Boolean  @default(true)
  connectionToTrucks String?
  positionInCompany String
  
  // Next of Kin Information
  nextOfKinName     String
  nextOfKinAddress  String
  nextOfKinPhone    String
  nextOfKinRelationship String
  
  // Bank Account Details
  bankName          String
  accountNumber     String
  accountName       String
  
  // Truck Information
  truckMake         String
  truckModel        String
  truckYear         Int
  plateNumber       String   @unique
  vinNumber         String?
  truckType         String
  capacity          String?
  
  // Insurance & Documents
  insuranceProvider String
  insuranceExpiry   DateTime
  licenseExpiry     DateTime
  
  // Document Uploads
  nationalIdCard    String
  utilityBill       String
  vehicleLicense    String
  proofOfOwnership  String
  hackneyPermit     String
  roadWorthiness    String
  
  // Service Areas & Preferences
  serviceAreas      String[]
  willingToRelocate Boolean  @default(false)
  
  // Experience & Specializations
  experience        String
  specializations   String[]
  additionalNotes   String?  @db.Text
  
  // Agreement
  agreedToTerms     Boolean  @default(false)
  agreedToPrivacy   Boolean  @default(false)
  
  // Status & Metadata
  status            String   @default("pending") // "pending", "approved", "rejected", "suspended"
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewNotes       String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([email])
  @@index([plateNumber])
  @@index([status])
  @@map("truck_registrations")
}

model PartnerRegistration {
  id                String   @id @default(uuid())
  
  // Company & Owner Information
  companyName       String
  ownerName         String
  email             String   @unique
  phoneNumber       String
  homeAddress       String
  officeWarehouseAddress String
  
  // Bank Account Details
  bankName          String
  accountNumber     String
  accountName       String
  
  // Next of Kin Information
  nextOfKinName     String
  nextOfKinRelationship String
  nextOfKinAddress  String
  nextOfKinPhone    String
  
  // Document Uploads (file names/URLs)
  nationalIdCard    String
  utilityBill       String
  cacRegistration   String
  otherDocuments    String?
  
  // Agreement
  agreedToTerms     Boolean  @default(false)
  agreedToPrivacy   Boolean  @default(false)
  
  // Status and timestamps
  status            String   @default("pending") // "pending", "approved", "rejected", "under_review"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([email])
  @@index([status])
  @@map("partner_registrations")
}